if [ -f '/usr/local/opt/chruby/share/chruby/chruby.sh' ]; then
  source /usr/local/opt/chruby/share/chruby/chruby.sh
  source /usr/local/opt/chruby/share/chruby/auto.sh
else
  echo "**********************"
  echo "*  chruby NOT FOUND  *"
  echo "**********************"
fi

if [ -f '/usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh' ]; then
  source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

if [ -d '/usr/X11/include' ]; then
  export CPPFLAGS="${CPPFLAGS} -I/usr/X11/include -I/usr/X11/include/libpng15 -I/usr/X11/include/freetype2"
fi

if [ -d '/usr/local/opt/readline' ]; then
  export LDFLAGS="${LDFLAGS} -L/usr/local/opt/readline/lib"
  export CPPFLAGS="${CPPFLAGS} -I/usr/local/opt/readline/include"
fi

if [ -d '/usr/local/opt/openssl' ]; then
  export LDFLAGS="${LDFLAGS} -L/usr/local/opt/openssl/lib"
  export CPPFLAGS="${CPPFLAGS} -I/usr/local/opt/openssl/include"

  if [ -z "${PKG_CONFIG_PATH}" ]; then
    export PKG_CONFIG_PATH="/usr/local/opt/openssl/lib/pkgconfig"
  else
    export PKG_CONFIG_PATH="${PKG_CONFIG_PATH}:/usr/local/opt/openssl/lib/pkgconfig"
  fi
fi

if [ -d '/usr/local/opt/libffi' ]; then
  export LDFLAGS="${LDFLAGS} -L/usr/local/opt/libffi/lib"

  if [ -z "${PKG_CONFIG_PATH}" ]; then
    export PKG_CONFIG_PATH="/usr/local/opt/libffi/lib/pkgconfig"
  else
    export PKG_CONFIG_PATH="${PKG_CONFIG_PATH}:/usr/local/opt/libffi/lib/pkgconfig"
  fi
fi

if [ -d '/usr/local/opt/bison' ]; then
  export LDFLAGS="${LDFLAGS} -L/usr/local/opt/bison/lib"
  export PATH="/usr/local/opt/bison/bin:$PATH"
fi

if [ -d '/Users/_m/Library/Python/3.7/bin' ]; then
  export PATH="/Users/_m/Library/Python/3.7/bin:$PATH"
fi

export ARCHFLAGS="-arch x86_64"
export SSL_CERT_FILE=/usr/local/etc/openssl/cert.pem

# Java - OSX has a preinstalled binary stub at 
#export JAVA_HOME=$(/usr/libexec/java_home)

# Uncomment to use Homebrew's directories rather than ~/.pyenv
#export PYENV_ROOT=/usr/local/opt/pyenv

export PYENV_VERSION="2.7.8"
# Enable pyenv shims and autocompletion
if which pyenv > /dev/null; then
  eval "$(pyenv init -)"
fi

fpath=(/usr/local/share/zsh-completions $fpath)

if [ -d '/usr/local/opt/gnu-sed/libexec/gnubin' ]; then
  export PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"
fi

if [ -d '/usr/local/opt/python/libexec/bin' ]; then
  export PATH="/usr/local/opt/python/libexec/bin:$PATH"
fi

# Setup fzf
# ---------
if [ -d '/usr/local/opt/fzf' ]; then
  if [[ ! "$PATH" == */usr/local/opt/fzf/bin* ]]; then
    export PATH="${PATH:+${PATH}:}/usr/local/opt/fzf/bin"
  fi

  # Auto-completion
  # ---------------
  [[ $- == *i* ]] && source "/usr/local/opt/fzf/shell/completion.zsh" 2> /dev/null

  # Key bindings
  # ------------
  source "/usr/local/opt/fzf/shell/key-bindings.zsh"
fi

# Setup dotnet-core
# -----------------
if [ -d '/usr/local/share/dotnet' ]; then
  export PATH="/usr/local/share/dotnet:${PATH}"
fi

# ensure boot2docker ENV variables
#if which boot2docker > /dev/null; then
#  eval $(boot2docker shellinit 2> /dev/null)
#fi

# ensure docker ENV variables
#if which docker-machine > /dev/null; then
#  eval "$(docker-machine env default)"
#fi
